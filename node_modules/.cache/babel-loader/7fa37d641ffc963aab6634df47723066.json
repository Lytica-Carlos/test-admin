{"ast":null,"code":"import _ from 'lodash';\nconst [GET_LIST, CREATE, UPDATE, UPDATE_MANY, DELETE, DELETE_MANY, GET_MANY_REFERENCE, GET_ONE] = ['GET_LIST', 'CREATE', 'UPDATE', 'UPDATE_MANY', 'DELETE', 'DELETE_MANY', 'GET_MANY_REFERENCE', 'GET_ONE'];\n\nconst lb4Provider = (apiUrl, headers = () => {}, idParamApi = '_id', idParamAdmin = 'id', ftch = fetch) => {\n  const getOptions = async (type, body) => {\n    const options = {\n      headers: {\n        'Accept': 'application/json',\n        ...(await headers())\n      }\n    };\n\n    if (body) {\n      options.body = JSON.stringify(_.omit(body, [idParamApi, idParamAdmin]));\n      options.headers['Content-Type'] = 'application/json';\n    }\n\n    switch (type) {\n      case CREATE:\n        options.method = 'POST';\n        break;\n\n      case UPDATE:\n      case UPDATE_MANY:\n        options.method = 'PATCH';\n        break;\n\n      case DELETE:\n      case DELETE_MANY:\n        options.method = 'DELETE';\n        break;\n\n      default:\n        options.method = 'GET';\n    }\n\n    return options;\n  };\n\n  const setWhere = (url, filter, initKey = 'filter[where]') => {\n    const search = url.searchParams;\n\n    const fn = (any, key = initKey) => {\n      if (Array.isArray(any)) {\n        for (let item of any) {\n          search.append(key, item);\n        }\n\n        return;\n      }\n\n      if (any instanceof Object) {\n        Object.keys(any).forEach(p => {\n          fn(any[p], `${key}[${p === idParamAdmin ? idParamApi : p}]`);\n        });\n        return;\n      }\n\n      search.append(key, any);\n    };\n\n    fn(filter);\n  };\n\n  const fetchTotal = async (resource, filter) => {\n    const url = new URL(apiUrl);\n    const path = url.pathname.split('/');\n    path.push(resource, 'count');\n    if (filter && Object.keys(filter).length > 0) setWhere(url, filter, 'where');\n    url.pathname = path.filter(Boolean).join('/');\n    return (await (await ftch(url.toString(), await getOptions())).json()).count;\n  };\n\n  const setLimitAndOffset = (url, {\n    page = 1,\n    perPage = 10\n  }) => {\n    const search = url.searchParams;\n    search.append('filter[limit]', perPage + '');\n    search.append('filter[offset]', (page - 1) * perPage + '');\n  };\n\n  const setOrder = (url, {\n    field = 'createdAt',\n    order = 'DESC'\n  }) => {\n    const search = url.searchParams;\n    search.append('filter[order]', `${field} ${order}`);\n  };\n\n  const mapKeys = obj => _.mapKeys(obj, (value, key) => {\n    if (key === idParamApi) return idParamAdmin;\n    return key;\n  });\n\n  const fn = async (type, resource, {\n    pagination,\n    sort,\n    filter = {},\n    data,\n    ids,\n    id,\n    target\n  }) => {\n    let total = null;\n\n    if ([GET_LIST, GET_MANY_REFERENCE].indexOf(type) > -1) {\n      const totalFilter = JSON.parse(JSON.stringify(filter));\n      if (id) totalFilter[target || idParamApi] = id;\n      total = await fetchTotal(resource, totalFilter);\n    }\n\n    const url = new URL(apiUrl);\n    const path = url.pathname.split('/');\n    path.push(resource);\n    if (id && !target) path.push(id);\n    if (id && target) filter[target] = id;\n\n    if (ids) {\n      if (type === DELETE_MANY) {\n        const r = [];\n\n        for (let id of ids) {\n          r.push((await fn(DELETE, resource, {\n            id\n          })).data);\n        }\n\n        return {\n          data: r.map(el => el[idParamAdmin])\n        };\n      }\n\n      _.set(filter, `${idParamApi}.inq`, ids);\n    }\n\n    if (filter && Object.keys(filter).length > 0) {\n      if ([UPDATE_MANY].indexOf(type) > -1) setWhere(url, filter, 'where');else setWhere(url, filter);\n    }\n\n    if (pagination) setLimitAndOffset(url, pagination);\n    if (sort) setOrder(url, sort);\n    const options = await getOptions(type, data);\n    let item;\n    if ([DELETE].indexOf(type) > -1) item = await fn(GET_ONE, resource, {\n      id\n    });\n    url.pathname = path.filter(Boolean).join('/');\n    let response = await ftch(url.toString(), options);\n\n    try {\n      response = await response.json();\n    } catch (e) {\n      if ([DELETE].indexOf(type) === -1) {\n        if (id) return await fn(GET_ONE, resource, {\n          id\n        });\n        throw e;\n      }\n    }\n\n    if (response.error) throw new Error(response.error.message);\n    let result = {};\n    if ([UPDATE_MANY, DELETE_MANY].indexOf(type) > -1) result.data = ids;else if ([DELETE].indexOf(type) > -1) result = item;else result.data = Array.isArray(response) ? response.map(mapKeys) : mapKeys(response);\n    if (typeof total === 'number') result.total = total;\n    return result;\n  };\n\n  return fn;\n};\n\nexport default lb4Provider;","map":{"version":3,"sources":["/home/roberto/Documents/Lytica/admin-front/test-admin/node_modules/react-admin-lb4/index.js"],"names":["_","GET_LIST","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","GET_MANY_REFERENCE","GET_ONE","lb4Provider","apiUrl","headers","idParamApi","idParamAdmin","ftch","fetch","getOptions","type","body","options","JSON","stringify","omit","method","setWhere","url","filter","initKey","search","searchParams","fn","any","key","Array","isArray","item","append","Object","keys","forEach","p","fetchTotal","resource","URL","path","pathname","split","push","length","Boolean","join","toString","json","count","setLimitAndOffset","page","perPage","setOrder","field","order","mapKeys","obj","value","pagination","sort","data","ids","id","target","total","indexOf","totalFilter","parse","r","map","el","set","response","e","error","Error","message","result"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nconst [\n    GET_LIST,\n    CREATE,\n    UPDATE,\n    UPDATE_MANY,\n    DELETE,\n    DELETE_MANY,\n    GET_MANY_REFERENCE,\n    GET_ONE\n] = [\n    'GET_LIST',\n    'CREATE',\n    'UPDATE',\n    'UPDATE_MANY',\n    'DELETE',\n    'DELETE_MANY',\n    'GET_MANY_REFERENCE',\n    'GET_ONE'\n];\n\nconst lb4Provider = (apiUrl, headers = () => {}, idParamApi='_id', idParamAdmin='id', ftch=fetch) => {\n    const getOptions = async (type, body) => {\n        const options = {\n            headers: {\n                'Accept': 'application/json',\n                ...(await headers())\n            }\n        };\n        if (body) {\n            options.body = JSON.stringify(_.omit(body, [idParamApi, idParamAdmin]));\n            options.headers['Content-Type'] = 'application/json';\n        }\n        switch (type) {\n            case CREATE:\n                options.method = 'POST';\n                break;\n            case UPDATE:\n            case UPDATE_MANY:\n                options.method = 'PATCH';\n                break;\n            case DELETE:\n            case DELETE_MANY:\n                options.method = 'DELETE';\n                break;\n            default:\n                options.method = 'GET';\n        }\n\n        return options;\n    };\n\n    const setWhere = (url, filter, initKey = 'filter[where]') => {\n        const search = url.searchParams;\n        const fn = (any, key = initKey) => {\n            if (Array.isArray(any)) {\n                for (let item of any) {\n                    search.append(key, item);\n                }\n                return;\n            }\n            if (any instanceof Object) {\n                Object.keys(any).forEach(p => {\n                    fn(any[p], `${key}[${p === idParamAdmin ? idParamApi: p}]`);\n                });\n                return;\n            }\n            search.append(key, any);\n        };\n        fn(filter);\n    };\n\n    const fetchTotal = async (resource, filter) => {\n        const url = new URL(apiUrl);\n        const path = url.pathname.split('/');\n        path.push(resource, 'count');\n        if (filter && Object.keys(filter).length > 0)\n            setWhere(url, filter, 'where');\n        url.pathname = path.filter(Boolean).join('/');\n        return (await (await ftch(url.toString(), await getOptions())).json()).count;\n    };\n\n\n\n    const setLimitAndOffset = (url, {page=1, perPage=10}) => {\n        const search = url.searchParams;\n        search.append('filter[limit]', perPage + '');\n        search.append('filter[offset]', ((page - 1)*perPage) + '');\n    };\n\n    const setOrder = (url, {field='createdAt', order='DESC'}) => {\n        const search = url.searchParams;\n        search.append('filter[order]', `${field} ${order}`);\n    };\n\n\n\n    const mapKeys = obj => _.mapKeys(obj, (value, key) => {\n        if (key === idParamApi)\n            return idParamAdmin;\n        return key;\n    });\n\n    const fn =  async (type, resource, {\n        pagination,\n        sort,\n        filter={},\n        data,\n        ids,\n        id,\n        target\n    }) => {\n        let total = null;\n        if ( [ GET_LIST, GET_MANY_REFERENCE ].indexOf(type) > -1 ) {\n            const totalFilter = JSON.parse(JSON.stringify(filter));\n            if (id)\n                totalFilter[target || idParamApi] = id;\n            total = await fetchTotal(resource, totalFilter);\n        }\n\n        const url = new URL(apiUrl);\n\n        const path = url.pathname.split('/');\n        path.push(resource);\n        if (id && !target)\n            path.push(id);\n\n        if (id && target)\n            filter[target] = id;\n        if (ids) {\n            if (type === DELETE_MANY) {\n                const r = [];\n                for (let id of ids) {\n                    r.push((await fn(DELETE, resource, {id})).data);\n                }\n                return { data: r.map(el => el[idParamAdmin]) };\n            }\n            _.set(filter, `${idParamApi}.inq`, ids);\n        }\n        if (filter && Object.keys(filter).length > 0) {\n            if ( [ UPDATE_MANY ].indexOf(type) > -1 )\n                setWhere(url, filter, 'where');\n            else\n                setWhere(url, filter);\n        }\n\n        if (pagination)\n            setLimitAndOffset(url, pagination);\n        if (sort)\n            setOrder(url, sort);\n\n        const options = await getOptions(type, data);\n        let item;\n        if ( [ DELETE ].indexOf(type) > -1 )\n            item = await fn(GET_ONE, resource, { id });\n        url.pathname = path.filter(Boolean).join('/');\n        let response = await ftch(url.toString(), options);\n        try {\n            response = await response.json();\n        } catch (e) {\n            if ([ DELETE ].indexOf(type) === -1) {\n                if (id)\n                    return await fn(GET_ONE, resource, {id});\n                throw e;\n            }\n        }\n        if (response.error)\n            throw new Error(response.error.message);\n        let result = {};\n        if ( [ UPDATE_MANY, DELETE_MANY ].indexOf(type) > -1 )\n            result.data = ids;\n        else if ( [ DELETE ].indexOf(type) > -1 )\n            result = item;\n        else\n            result.data = Array.isArray(response) ? response.map(mapKeys): mapKeys(response);\n\n        if (typeof total === 'number')\n            result.total = total;\n\n        return result;\n    };\n\n    return fn;\n};\n\nexport default lb4Provider;\n"]},"metadata":{},"sourceType":"module"}