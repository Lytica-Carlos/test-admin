{"ast":null,"code":"import * as React from \"react\";\nimport { useQueryWithStore, Loading, Error } from 'react-admin';\nimport drfProvider from 'ra-data-django-rest-framework';\nimport { List, Datagrid, TextField, DateField, EmailField, SearchInput, Filter, fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  console.log(url);\n\n  if (!options.headers) {\n    options.headers = new Headers({\n      Accept: 'application/json'\n    });\n  }\n\n  const {\n    token\n  } = JSON.parse(localStorage.getItem('auth'));\n  options.headers.set('Authorization', `Bearer ${token}`);\n  return fetchUtils.fetchJson(url, options);\n};\n\nconst dataProvider = drfProvider('https://staging.vico.ai/analytics', httpClient);\ndataProvider.getList('stores', {\n  pagination: {\n    page: 0,\n    perPage: 5\n  },\n  sort: {\n    field: 'id',\n    order: 'ASC'\n  }\n}); // const storeProvider = ({ userId, props }) => {\n//     const { data, loaded, error } = useQueryWithStore({ \n//         type: 'getMany',\n//         resource: 'stores',\n//         payload: { id: userId }\n//     });\n//     if (!loaded) { return <Loading />; }\n//     if (error) { return <Error />; }\n//     return (\n//         <List {...props}>\n//             <Datagrid rowClick=\"edit\">\n//                 <TextField source=\"data.id\" />\n//                 <TextField source=\"name\" />\n//                 <TextField source=\"assigned\" />\n//                 <TextField source=\"categories\" />\n//                 <TextField source=\"schedules\" />\n//                 <TextField source=\"time_zone\" />\n//                 <TextField source=\"identifier\" />\n//             </Datagrid>\n//         </List>\n//     );\n// };\n\nexport default dataProvider;","map":{"version":3,"sources":["/home/roberto/Documents/Personal/test-admin/src/StoreProvider.js"],"names":["React","useQueryWithStore","Loading","Error","drfProvider","List","Datagrid","TextField","DateField","EmailField","SearchInput","Filter","fetchUtils","httpClient","url","options","console","log","headers","Headers","Accept","token","JSON","parse","localStorage","getItem","set","fetchJson","dataProvider","getList","pagination","page","perPage","sort","field","order"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,EAA4BC,OAA5B,EAAqCC,KAArC,QAAkD,aAAlD;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,SAApC,EAA+CC,UAA/C,EAA2DC,WAA3D,EAAwEC,MAAxE,EAA+EC,UAA/E,QAAiG,aAAjG;;AAGA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,OAAO,GAAG,EAAhB,KAAuB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,MAAI,CAACC,OAAO,CAACG,OAAb,EAAsB;AAClBH,IAAAA,OAAO,CAACG,OAAR,GAAkB,IAAIC,OAAJ,CAAY;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAZ,CAAlB;AACH;;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAYC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAlB;AACAV,EAAAA,OAAO,CAACG,OAAR,CAAgBQ,GAAhB,CAAoB,eAApB,EAAsC,UAASL,KAAM,EAArD;AACA,SAAOT,UAAU,CAACe,SAAX,CAAqBb,GAArB,EAA0BC,OAA1B,CAAP;AACH,CARD;;AASA,MAAMa,YAAY,GAAGxB,WAAW,CAAC,mCAAD,EAAsCS,UAAtC,CAAhC;AAEIe,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B;AAC/BC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,OAAO,EAAE;AAApB,GADmB;AAE/BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,KAAK,EAAE;AAAtB;AAFyB,CAA/B,E,CAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeP,YAAf","sourcesContent":["import * as React from \"react\";\nimport { useQueryWithStore, Loading, Error } from 'react-admin';\nimport drfProvider from 'ra-data-django-rest-framework';\nimport { List, Datagrid, TextField, DateField, EmailField, SearchInput, Filter,fetchUtils } from 'react-admin';\n\n\nconst httpClient = (url, options = {}) => {\n    console.log(url)\n    if (!options.headers) {\n        options.headers = new Headers({ Accept: 'application/json' });\n    }\n    const { token } = JSON.parse(localStorage.getItem('auth'));\n    options.headers.set('Authorization', `Bearer ${token}`);\n    return fetchUtils.fetchJson(url, options);\n};\nconst dataProvider = drfProvider('https://staging.vico.ai/analytics', httpClient);\n\n    dataProvider.getList('stores', {\n    pagination: { page: 0, perPage: 5 },\n    sort: { field: 'id', order: 'ASC' },\n    })\n// const storeProvider = ({ userId, props }) => {\n//     const { data, loaded, error } = useQueryWithStore({ \n//         type: 'getMany',\n//         resource: 'stores',\n//         payload: { id: userId }\n//     });\n//     if (!loaded) { return <Loading />; }\n//     if (error) { return <Error />; }\n//     return (\n//         <List {...props}>\n//             <Datagrid rowClick=\"edit\">\n//                 <TextField source=\"data.id\" />\n//                 <TextField source=\"name\" />\n//                 <TextField source=\"assigned\" />\n//                 <TextField source=\"categories\" />\n//                 <TextField source=\"schedules\" />\n//                 <TextField source=\"time_zone\" />\n//                 <TextField source=\"identifier\" />\n//             </Datagrid>\n//         </List>\n//     );\n// };\n\nexport default dataProvider;"]},"metadata":{},"sourceType":"module"}